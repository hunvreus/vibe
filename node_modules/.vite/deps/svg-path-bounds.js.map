{
  "version": 3,
  "sources": ["../../parse-svg-path/index.js", "../../abs-svg-path/index.js", "../../svg-arc-to-cubic-bezier/modules/index.js", "../../normalize-svg-path/index.js", "../../is-svg-path/index.js", "../../svg-path-bounds/index.js"],
  "sourcesContent": ["\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n", "\nmodule.exports = absolutize\n\n/**\n * redefine `path` with absolute coordinates\n *\n * @param {Array} path\n * @return {Array}\n */\n\nfunction absolutize(path){\n\tvar startX = 0\n\tvar startY = 0\n\tvar x = 0\n\tvar y = 0\n\n\treturn path.map(function(seg){\n\t\tseg = seg.slice()\n\t\tvar type = seg[0]\n\t\tvar command = type.toUpperCase()\n\n\t\t// is relative\n\t\tif (type != command) {\n\t\t\tseg[0] = command\n\t\t\tswitch (type) {\n\t\t\t\tcase 'a':\n\t\t\t\t\tseg[6] += x\n\t\t\t\t\tseg[7] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'v':\n\t\t\t\t\tseg[1] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'h':\n\t\t\t\t\tseg[1] += x\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tfor (var i = 1; i < seg.length;) {\n\t\t\t\t\t\tseg[i++] += x\n\t\t\t\t\t\tseg[i++] += y\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// update cursor state\n\t\tswitch (command) {\n\t\t\tcase 'Z':\n\t\t\t\tx = startX\n\t\t\t\ty = startY\n\t\t\t\tbreak\n\t\t\tcase 'H':\n\t\t\t\tx = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'V':\n\t\t\t\ty = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'M':\n\t\t\t\tx = startX = seg[1]\n\t\t\t\ty = startY = seg[2]\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tx = seg[seg.length - 2]\n\t\t\t\ty = seg[seg.length - 1]\n\t\t}\n\n\t\treturn seg\n\t})\n}\n", "var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar TAU = Math.PI * 2;\n\nvar mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {\n  var x = _ref.x,\n      y = _ref.y;\n\n  x *= rx;\n  y *= ry;\n\n  var xp = cosphi * x - sinphi * y;\n  var yp = sinphi * x + cosphi * y;\n\n  return {\n    x: xp + centerx,\n    y: yp + centery\n  };\n};\n\nvar approxUnitArc = function approxUnitArc(ang1, ang2) {\n  // If 90 degree circular arc, use a constant\n  // as derived from http://spencermortensen.com/articles/bezier-circle\n  var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n\n  var x1 = Math.cos(ang1);\n  var y1 = Math.sin(ang1);\n  var x2 = Math.cos(ang1 + ang2);\n  var y2 = Math.sin(ang1 + ang2);\n\n  return [{\n    x: x1 - y1 * a,\n    y: y1 + x1 * a\n  }, {\n    x: x2 + y2 * a,\n    y: y2 - x2 * a\n  }, {\n    x: x2,\n    y: y2\n  }];\n};\n\nvar vectorAngle = function vectorAngle(ux, uy, vx, vy) {\n  var sign = ux * vy - uy * vx < 0 ? -1 : 1;\n\n  var dot = ux * vx + uy * vy;\n\n  if (dot > 1) {\n    dot = 1;\n  }\n\n  if (dot < -1) {\n    dot = -1;\n  }\n\n  return sign * Math.acos(dot);\n};\n\nvar getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n  var rxsq = Math.pow(rx, 2);\n  var rysq = Math.pow(ry, 2);\n  var pxpsq = Math.pow(pxp, 2);\n  var pypsq = Math.pow(pyp, 2);\n\n  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;\n\n  if (radicant < 0) {\n    radicant = 0;\n  }\n\n  radicant /= rxsq * pypsq + rysq * pxpsq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n\n  var centerxp = radicant * rx / ry * pyp;\n  var centeryp = radicant * -ry / rx * pxp;\n\n  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n\n  var vx1 = (pxp - centerxp) / rx;\n  var vy1 = (pyp - centeryp) / ry;\n  var vx2 = (-pxp - centerxp) / rx;\n  var vy2 = (-pyp - centeryp) / ry;\n\n  var ang1 = vectorAngle(1, 0, vx1, vy1);\n  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n\n  return [centerx, centery, ang1, ang2];\n};\n\nvar arcToBezier = function arcToBezier(_ref2) {\n  var px = _ref2.px,\n      py = _ref2.py,\n      cx = _ref2.cx,\n      cy = _ref2.cy,\n      rx = _ref2.rx,\n      ry = _ref2.ry,\n      _ref2$xAxisRotation = _ref2.xAxisRotation,\n      xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation,\n      _ref2$largeArcFlag = _ref2.largeArcFlag,\n      largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag,\n      _ref2$sweepFlag = _ref2.sweepFlag,\n      sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;\n\n  var curves = [];\n\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n\n  var sinphi = Math.sin(xAxisRotation * TAU / 360);\n  var cosphi = Math.cos(xAxisRotation * TAU / 360);\n\n  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n\n  if (pxp === 0 && pyp === 0) {\n    return [];\n  }\n\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n\n  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n  var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),\n      _getArcCenter2 = _slicedToArray(_getArcCenter, 4),\n      centerx = _getArcCenter2[0],\n      centery = _getArcCenter2[1],\n      ang1 = _getArcCenter2[2],\n      ang2 = _getArcCenter2[3];\n\n  // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n  // 1.0000000001. This causes `segments` to be greater than one, which is an\n  // unecessary split, and adds extra points to the bezier curve. To alleviate\n  // this issue, we round to 1.0 when the ratio is close to 1.0.\n\n\n  var ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1.0 - ratio) < 0.0000001) {\n    ratio = 1.0;\n  }\n\n  var segments = Math.max(Math.ceil(ratio), 1);\n\n  ang2 /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    curves.push(approxUnitArc(ang1, ang2));\n    ang1 += ang2;\n  }\n\n  return curves.map(function (curve) {\n    var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),\n        x1 = _mapToEllipse.x,\n        y1 = _mapToEllipse.y;\n\n    var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),\n        x2 = _mapToEllipse2.x,\n        y2 = _mapToEllipse2.y;\n\n    var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),\n        x = _mapToEllipse3.x,\n        y = _mapToEllipse3.y;\n\n    return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };\n  });\n};\n\nexport default arcToBezier;", "'use strict'\r\n\r\nmodule.exports = normalize\r\n\r\nvar arcToCurve = require('svg-arc-to-cubic-bezier')\r\n\r\nfunction normalize(path){\r\n  // init state\r\n  var prev\r\n  var result = []\r\n  var bezierX = 0\r\n  var bezierY = 0\r\n  var startX = 0\r\n  var startY = 0\r\n  var quadX = null\r\n  var quadY = null\r\n  var x = 0\r\n  var y = 0\r\n\r\n  for (var i = 0, len = path.length; i < len; i++) {\r\n    var seg = path[i]\r\n    var command = seg[0]\r\n\r\n    switch (command) {\r\n      case 'M':\r\n        startX = seg[1]\r\n        startY = seg[2]\r\n        break\r\n      case 'A':\r\n        var curves = arcToCurve({\r\n          px: x,\r\n          py: y,\r\n          cx: seg[6],\r\n          cy:  seg[7],\r\n          rx: seg[1],\r\n          ry: seg[2],\r\n          xAxisRotation: seg[3],\r\n          largeArcFlag: seg[4],\r\n          sweepFlag: seg[5]\r\n        })\r\n\r\n        // null-curves\r\n        if (!curves.length) continue\r\n\r\n        for (var j = 0, c; j < curves.length; j++) {\r\n          c = curves[j]\r\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y]\r\n          if (j < curves.length - 1) result.push(seg)\r\n        }\r\n\r\n        break\r\n      case 'S':\r\n        // default control point\r\n        var cx = x\r\n        var cy = y\r\n        if (prev == 'C' || prev == 'S') {\r\n          cx += cx - bezierX // reflect the previous command's control\r\n          cy += cy - bezierY // point relative to the current point\r\n        }\r\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\r\n        break\r\n      case 'T':\r\n        if (prev == 'Q' || prev == 'T') {\r\n          quadX = x * 2 - quadX // as with 'S' reflect previous control point\r\n          quadY = y * 2 - quadY\r\n        } else {\r\n          quadX = x\r\n          quadY = y\r\n        }\r\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])\r\n        break\r\n      case 'Q':\r\n        quadX = seg[1]\r\n        quadY = seg[2]\r\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\r\n        break\r\n      case 'L':\r\n        seg = line(x, y, seg[1], seg[2])\r\n        break\r\n      case 'H':\r\n        seg = line(x, y, seg[1], y)\r\n        break\r\n      case 'V':\r\n        seg = line(x, y, x, seg[1])\r\n        break\r\n      case 'Z':\r\n        seg = line(x, y, startX, startY)\r\n        break\r\n    }\r\n\r\n    // update state\r\n    prev = command\r\n    x = seg[seg.length - 2]\r\n    y = seg[seg.length - 1]\r\n    if (seg.length > 4) {\r\n      bezierX = seg[seg.length - 4]\r\n      bezierY = seg[seg.length - 3]\r\n    } else {\r\n      bezierX = x\r\n      bezierY = y\r\n    }\r\n    result.push(seg)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction line(x1, y1, x2, y2){\r\n  return ['C', x1, y1, x2, y2, x2, y2]\r\n}\r\n\r\nfunction quadratic(x1, y1, cx, cy, x2, y2){\r\n  return [\r\n    'C',\r\n    x1/3 + (2/3) * cx,\r\n    y1/3 + (2/3) * cy,\r\n    x2/3 + (2/3) * cx,\r\n    y2/3 + (2/3) * cy,\r\n    x2,\r\n    y2\r\n  ]\r\n}\r\n", "'use strict'\r\n\r\nmodule.exports = function isPath(str) {\r\n\tif (typeof str !== 'string') return false\r\n\r\n\tstr = str.trim()\r\n\r\n\t// https://www.w3.org/TR/SVG/paths.html#PathDataBNF\r\n\tif (/^[mzlhvcsqta]\\s*[-+.0-9][^mlhvzcsqta]+/i.test(str) && /[\\dz]$/i.test(str) && str.length > 4) return true\r\n\r\n\treturn false\r\n}\r\n", "'use strict'\r\n\r\nvar parse = require('parse-svg-path')\r\nvar abs = require('abs-svg-path')\r\nvar normalize = require('normalize-svg-path')\r\nvar isSvgPath = require('is-svg-path')\r\n\r\nmodule.exports = pathBounds\r\n\r\n\r\nfunction pathBounds(path) {\r\n  // ES6 string tpl call\r\n  if (Array.isArray(path) && path.length === 1 && typeof path[0] === 'string') path = path[0]\r\n\r\n  // svg path string\r\n  if (typeof path === 'string') {\r\n    if (!isSvgPath(path)) throw Error('String is not an SVG path.')\r\n    path = parse(path)\r\n  }\r\n\r\n  if (!Array.isArray(path)) throw Error('Argument should be a string or an array of path segments.')\r\n\r\n  path = abs(path)\r\n  path = normalize(path)\r\n\r\n  if (!path.length) return [0, 0, 0, 0]\r\n\r\n  var bounds = [Infinity, Infinity, -Infinity, -Infinity]\r\n\r\n  for (var i = 0, l = path.length; i < l; i++) {\r\n    var points = path[i].slice(1)\r\n\r\n    for (var j = 0; j < points.length; j += 2) {\r\n      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0]\r\n      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1]\r\n      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0]\r\n      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1]\r\n    }\r\n  }\r\n\r\n  return bounds\r\n}\r\n"],
  "mappings": "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",
  "names": ["mapToEllipse", "approxUnitArc", "vectorAngle", "getArcCenter", "arcToBezier"]
}
